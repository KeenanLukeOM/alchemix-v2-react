/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VaultsImport } from './routes/vaults'
import { Route as TransmutersImport } from './routes/transmuters'

// Create Virtual Routes

const UtilitiesLazyImport = createFileRoute('/utilities')()
const GovernanceLazyImport = createFileRoute('/governance')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const UtilitiesLazyRoute = UtilitiesLazyImport.update({
  path: '/utilities',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/utilities.lazy').then((d) => d.Route))

const GovernanceLazyRoute = GovernanceLazyImport.update({
  path: '/governance',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/governance.lazy').then((d) => d.Route))

const VaultsRoute = VaultsImport.update({
  path: '/vaults',
  getParentRoute: () => rootRoute,
} as any)

const TransmutersRoute = TransmutersImport.update({
  path: '/transmuters',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/transmuters': {
      id: '/transmuters'
      path: '/transmuters'
      fullPath: '/transmuters'
      preLoaderRoute: typeof TransmutersImport
      parentRoute: typeof rootRoute
    }
    '/vaults': {
      id: '/vaults'
      path: '/vaults'
      fullPath: '/vaults'
      preLoaderRoute: typeof VaultsImport
      parentRoute: typeof rootRoute
    }
    '/governance': {
      id: '/governance'
      path: '/governance'
      fullPath: '/governance'
      preLoaderRoute: typeof GovernanceLazyImport
      parentRoute: typeof rootRoute
    }
    '/utilities': {
      id: '/utilities'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof UtilitiesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  TransmutersRoute,
  VaultsRoute,
  GovernanceLazyRoute,
  UtilitiesLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/transmuters",
        "/vaults",
        "/governance",
        "/utilities"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/transmuters": {
      "filePath": "transmuters.tsx"
    },
    "/vaults": {
      "filePath": "vaults.tsx"
    },
    "/governance": {
      "filePath": "governance.lazy.tsx"
    },
    "/utilities": {
      "filePath": "utilities.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
